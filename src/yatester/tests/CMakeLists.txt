# Add yatester module
# add_yatester_selftest(source)
function(add_yatester_selftest source)
	get_filename_component(source_we ${source} NAME_WE)
	string(CONCAT name ${source_we} test)
	add_executable(${name} ${source})
	target_link_libraries(${name} yatester)
	set_target_properties(${name} PROPERTIES FOLDER tests)
endfunction()

# Add smart test with plenty of options
# If WILL_FAIL is added, the test must fail. It is not necessary to specify this argument
# if the REGEX argument is specific
# If REGEX is specified, test only passes if output matches on of the comma separated regexes
# add_smart_test(NAME <name> COMMAND <command...> [REGEX <regexes>] [WILL_FAIL])
function(add_smart_test)
	set(options WILL_FAIL)
	set(one_value_keywords NAME REGEX)
	set(multi_value_keywords COMMAND)
	cmake_parse_arguments(ARG "${options}" "${one_value_keywords}" "${multi_value_keywords}" ${ARGN})
	if(NOT DEFINED ARG_NAME)
		message(FATAL_ERROR "NAME not defined")
	endif()
	if(NOT DEFINED ARG_COMMAND)
		message(FATAL_ERROR "COMMAND not defined")
	endif()
	add_test(NAME ${ARG_NAME} COMMAND ${ARG_COMMAND})
	if(DEFINED ARG_REGEX)
		set_tests_properties(${ARG_NAME} PROPERTIES PASS_REGULAR_EXPRESSION ${ARG_REGEX})
	else()
		set_tests_properties(${ARG_NAME} PROPERTIES WILL_FAIL ${ARG_WILL_FAIL})
	endif()
endfunction()

# Add smart test with plenty of options for yatester scripts
# Passes aditional arguments to add_smart_test
# add_smart_script_test(TARGET <tgt> SOURCE <script> [options...])
function(add_smart_script_test)
	set(one_value_keywords TARGET SOURCE)
	cmake_parse_arguments(ARG "" "${one_value_keywords}" "" "${ARGN}")
	if(NOT DEFINED ARG_TARGET)
		message(FATAL_ERROR "TARGET not defined")
	endif()
	if(NOT DEFINED ARG_SOURCE)
		message(FATAL_ERROR "SOURCE not defined")
	endif()
	get_filename_component(SOURCE_ABSOLUTE ${ARG_SOURCE} ABSOLUTE)
	set(COMMAND_ARGS ${ARG_TARGET} "--input-file" "${SOURCE_ABSOLUTE}")
	if(CMAKE_BUILD_TYPE STREQUAL Debug)
		list(APPEND COMMAND_ARGS "--enable-log-channel" "LEAKAGE")
	endif()
	add_smart_test(NAME ${ARG_SOURCE} COMMAND ${COMMAND_ARGS} ${ARG_UNPARSED_ARGUMENTS})
endfunction()

add_yatester_selftest(empty.test.c)
add_smart_script_test(TARGET emptytest SOURCE empty.1.script)
add_smart_script_test(TARGET emptytest SOURCE empty.2.script)
add_smart_script_test(TARGET emptytest SOURCE empty.3.script)
add_smart_test(NAME empty.1.fail COMMAND emptytest "--list-commands" REGEX "expect	1")
add_smart_test(NAME empty.2.fail COMMAND emptytest "--input-file" "x" REGEX "Could not open file \"x\" in reading mode")
if(CMAKE_BUILD_TYPE STREQUAL Debug)
	add_smart_test(NAME empty.3.fail COMMAND emptytest "--log-file" "/" REGEX "Could not open file \"/\" in writing mode")
	add_smart_test(NAME empty.4.fail COMMAND emptytest "--enable-log-channel" "x" REGEX "Log channel name \"x\" is invalid")
	add_smart_test(NAME empty.5.fail COMMAND emptytest "--malloc-failing-rate" "x" REGEX "Invalid value passed to --malloc-failing-rate")
	add_smart_test(NAME empty.6.fail COMMAND emptytest "--malloc-failing-index" "x" REGEX "Invalid value passed to --malloc-failing-index")
	add_smart_test(NAME empty.7.fail COMMAND emptytest "--prng-seed" "x" REGEX "Invalid value passed to --prng-seed")
endif()

add_yatester_selftest(self.test.c)
add_smart_script_test(TARGET selftest SOURCE self.1.script)
add_smart_script_test(TARGET selftest SOURCE self.1.fail WILL_FAIL)
add_smart_script_test(TARGET selftest SOURCE self.2.fail WILL_FAIL)
add_smart_script_test(TARGET selftest SOURCE self.3.fail WILL_FAIL)
add_smart_script_test(TARGET selftest SOURCE self.4.fail WILL_FAIL)
add_smart_script_test(TARGET selftest SOURCE self.5.fail WILL_FAIL)
add_smart_script_test(TARGET selftest SOURCE self.6.fail WILL_FAIL)

add_yatester_selftest(badcommand1.test.c)
add_smart_script_test(TARGET badcommand1test SOURCE badcommand1.1.fail WILL_FAIL)

add_yatester_selftest(badcommand2.test.c)
add_smart_script_test(TARGET badcommand2test SOURCE badcommand2.1.fail WILL_FAIL)

add_yatester_selftest(badcommand3.test.c)
add_smart_script_test(TARGET badcommand3test SOURCE badcommand3.1.fail WILL_FAIL)
